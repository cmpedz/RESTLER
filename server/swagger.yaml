openapi: 3.0.0
info:
  title: API Documentation for Items, VIP Items, and Users
  description: API for managing items, VIP items, and users in the Linglooma application with authentication, authorization, and stateful testing support.
  version: 1.0.0

servers:
  - url: http://localhost:8080
    description: Local server

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    Item:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        description:
          type: string
        img:
          type: string
          format: uri
          example: "https://picsum.photos/id/115/200/200"
      required:
        - id
        - name
        - description
        - img

    VipItem:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        description:
          type: string
        img:
          type: string
          format: uri
          example: "https://picsum.photos/id/115/200/200"
      required:
        - id
        - name
        - description
        - img

    User:
      type: object
      properties:
        id:
          type: integer
        username:
          type: string
        password:
          type: string
        role:
          type: string
          enum: ["admin", "user", "premium"]
      required:
        - id
        - username
        - password
        - role

    ItemInput:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        img:
          type: string
          format: uri
          example: "https://picsum.photos/id/115/200/200"
      required:
        - name
        - description
        - img

    UserInput:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
        role:
          type: string
          enum: ["admin", "user", "premium"]
      required:
        - username
        - password
        - role

    Error:
      type: object
      properties:
        message:
          type: string
      required:
        - message

    LoginInput:
      type: object
      properties:
        username:
          type: string
          enum: ["lehienadmin"]
          # default: 'lehien'
        password:
          type: string
          enum: ["12345678"]
          # default: '12345678'
      required:
        - username
        - password

    LoginResponse:
      type: object
      properties:
        token:
          type: string
          description: JWT token for authentication
      required:
        - token

paths:
  /register:
    post:
      summary: User registration
      description: Register a new user with username, password, and role.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserInput"
      responses:
        "201":
          description: Registration successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          description: Invalid registration input
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /login:
    post:
      summary: User login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginInput"
      responses:
        "200":
          description: Login successful, returns a token
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LoginResponse"
          links:
            getVipItems:
              operationId: getVipItem
              # operationRef: '#/paths/~1vipitems/get'
              description: Use the token from this response to authenticate and get VIP items
              parameters:
                header.Authorization: "Bearer $response.body#/token"
            getUsers:
              operationId: getUser
              # operationRef: '#/paths/~1users/get'
              description: Use the token from this response to authenticate and get users (admin only)
              parameters:
                header.Authorization: "Bearer $response.body#/token"
            createItem:
              operationId: addItem
              # operationRef: '#/paths/~1items/post'
              description: Use the token from this response to authenticate and create a new item (admin only)
              parameters:
                header.Authorization: "Bearer $response.body#/token"
        "401":
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /items:
    get:
      summary: Get all items
      security:
        - bearerAuth: []

      responses:
        "200":
          description: List of items retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Item"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      summary: Create a new item
      operationId: addItem
      security:
        - bearerAuth: []

      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ItemInput"
      responses:
        "200":
          description: Item created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Item"
          links:
            getItemById:
              operationRef: "#/paths/~1items~1{id}/get"
              description: Use the ID from this response to get the created item
              parameters:
                id: $response.body#/id
            updateItem:
              operationRef: "#/paths/~1items~1{id}/put"
              description: Use the ID from this response to update the created item
              parameters:
                id: $response.body#/id
            deleteItem:
              operationRef: "#/paths/~1items~1{id}/delete"
              description: Use the ID from this response to delete the created item
              parameters:
                id: $response.body#/id
        "401":
          description: Unauthorized - User not authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: Forbidden - User must be admin
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /items/{id}:
    get:
      summary: Get an item by ID
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Item retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Item"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    put:
      summary: Update an item by ID
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ItemInput"
      responses:
        "200":
          description: Item updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Item"
          links:
            getItemById:
              operationRef: "#/paths/~1items~1{id}/get"
              description: Use the ID from this response to get the updated item
              parameters:
                id: $response.body#/id
            deleteItem:
              operationRef: "#/paths/~1items~1{id}/delete"
              description: Use the ID from this response to delete the updated item
              parameters:
                id: $response.body#/id
        "401":
          description: Unauthorized - User not authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: Forbidden - User must be admin
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: Item not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    delete:
      summary: Delete an item by ID
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Item deleted successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Item"
        "401":
          description: Unauthorized - User not authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: Forbidden - User must be admin
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: Item not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /vipitems:
    get:
      summary: Get all VIP items
      operationId: getVipItem
      security:
        - bearerAuth: []

      responses:
        "200":
          description: List of VIP items retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/VipItem"
        "401":
          description: Unauthorized - User not authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: Forbidden - User must be premium or admin
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      summary: Create a new VIP item
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ItemInput"
      responses:
        "200":
          description: VIP item created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VipItem"
          links:
            getVipItemById:
              operationRef: "#/paths/~1vipitems~1{id}/get"
              description: Use the ID from this response to get the created VIP item
              parameters:
                id: $response.body#/id
            updateVipItem:
              operationRef: "#/paths/~1vipitems~1{id}/put"
              description: Use the ID from this response to update the created VIP item
              parameters:
                id: $response.body#/id
            deleteVipItem:
              operationRef: "#/paths/~1vipitems~1{id}/delete"
              description: Use the ID from this response to delete the created VIP item
              parameters:
                id: $response.body#/id
        "401":
          description: Unauthorized - User not authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: Forbidden - User must be admin
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /vipitems/{id}:
    get:
      summary: Get a VIP item by ID
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: VIP item retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/VipItem"
        "401":
          description: Unauthorized - User not authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: Forbidden - User must be premium or admin
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    put:
      summary: Update a VIP item by ID
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ItemInput"
      responses:
        "200":
          description: VIP item updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VipItem"
          links:
            getVipItemById:
              operationRef: "#/paths/~1vipitems~1{id}/get"
              description: Use the ID from this response to get the updated VIP item
              parameters:
                id: $response.body#/id
            deleteVipItem:
              operationRef: "#/paths/~1vipitems~1{id}/delete"
              description: Use the ID from this response to delete the updated VIP item
              parameters:
                id: $response.body#/id
        "401":
          description: Unauthorized - User not authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: Forbidden - User must be admin
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: VIP item not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    delete:
      summary: Delete a VIP item by ID
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: VIP item deleted successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VipItem"
        "401":
          description: Unauthorized - User not authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: Forbidden - User must be admin
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: VIP item not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /users/random:
    get:
      summary: Get random users
      operationId: getUserRandom
      security:
        - bearerAuth: []

      responses:
        "200":
          description: List of users retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"
          links:
            getItemById:
              operationRef: "#/paths/~1items~1{id}/get"
              description: Use the ID from this response to get the created item
              parameters:
                id: $response.body#/id
            updateItem:
              operationRef: "#/paths/~1items~1{id}/put"
              description: Use the ID from this response to update the created item
              parameters:
                id: $response.body#/id
            deleteItem:
              operationRef: "#/paths/~1items~1{id}/delete"
              description: Use the ID from this response to delete the created item
              parameters:
                id: $response.body#/id
        "401":
          description: Unauthorized - User not authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: Forbidden - User must be admin
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /users:
    get:
      summary: Get all users
      operationId: getUser
      security:
        - bearerAuth: []

      responses:
        "200":
          description: List of users retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"
        "401":
          description: Unauthorized - User not authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: Forbidden - User must be admin
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      summary: Create a new user
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserInput"
      responses:
        "200":
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "401":
          description: Unauthorized - User not authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: Forbidden - User must be admin
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /users/{id}:
    get:
      summary: Get a user by ID
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: User retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"
        "401":
          description: Unauthorized - User not authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: Forbidden - User must be admin
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    put:
      summary: Update a user by ID
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserInput"
      responses:
        "200":
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
          links:
            getUserById:
              operationRef: "#/paths/~1users~1{id}/get"
              description: Use the ID from this response to get the updated user
              parameters:
                id: $response.body#/id
            deleteUser:
              operationRef: "#/paths/~1users~1{id}/delete"
              description: Use the ID from this response to delete the updated user
              parameters:
                id: $response.body#/id
        "401":
          description: Unauthorized - User not authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: Forbidden - User must be admin
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: User not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    delete:
      summary: Delete a user by ID
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: User deleted successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "401":
          description: Unauthorized - User not authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: Forbidden - User must be admin
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: User not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
